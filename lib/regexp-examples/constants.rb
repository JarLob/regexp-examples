module RegexpExamples
  class ResultCountLimiters
    # The maximum variance for any given repeater, to prevent a huge/infinite number of
    # examples from being listed. For example, if @@max_repeater_variance = 2 then:
    # .* is equivalent to .{0,2}
    # .+ is equivalent to .{1,3}
    # .{2,} is equivalent to .{2,4}
    # .{,3} is equivalent to .{0,2}
    # .{3,8} is equivalent to .{3,5}
    MaxRepeaterVarianceDefault = 2

    # Maximum number of characters returned from a char set, to reduce output spam
    # For example, if @@max_group_results = 5 then:
    # \d = ["0", "1", "2", "3", "4"]
    # \w = ["a", "b", "c", "d", "e"]
    MaxGroupResultsDefault = 5

    class << self
      attr_reader :max_repeater_variance, :max_group_results
      def configure!(max_repeater_variance, max_group_results)
        @max_repeater_variance = (max_repeater_variance || MaxRepeaterVarianceDefault)
        @max_group_results = (max_group_results || MaxGroupResultsDefault)
      end
    end
  end

  def self.MaxRepeaterVariance
    ResultCountLimiters.max_repeater_variance
  end
  def self.MaxGroupResults
    ResultCountLimiters.max_group_results
  end

  module CharSets
    Lower        = Array('a'..'z')
    Upper        = Array('A'..'Z')
    Digit        = Array('0'..'9')
    Punct        = %w(! " # % & ' ( ) * , - . / : ; ? @ [ \\ ] _ { })
    Hex          = Array('a'..'f') | Array('A'..'F') | Digit
    Word         = Lower | Upper | Digit | ['_']
    Whitespace   = [' ', "\t", "\n", "\r", "\v", "\f"]
    Control      = (0..31).map(&:chr) | ["\x7f"]
    # Ensure that the "common" characters appear first in the array
    Any          = Lower | Upper | Digit | Punct | (0..127).map(&:chr)
    AnyNoNewLine = Any - ["\n"]
  end.freeze

  # Map of special regex characters, to their associated character sets
  BackslashCharMap = {
    'd' => CharSets::Digit,
    'D' => CharSets::Any - CharSets::Digit,
    'w' => CharSets::Word,
    'W' => CharSets::Any - CharSets::Word,
    's' => CharSets::Whitespace,
    'S' => CharSets::Any - CharSets::Whitespace,
    'h' => CharSets::Hex,
    'H' => CharSets::Any - CharSets::Hex,

    't' => ["\t"], # tab
    'n' => ["\n"], # new line
    'r' => ["\r"], # carriage return
    'f' => ["\f"], # form feed
    'a' => ["\a"], # alarm
    'v' => ["\v"], # vertical tab
    'e' => ["\e"], # escape
  }.freeze

  POSIXCharMap = {
    'alnum'  => CharSets::Upper | CharSets::Lower | CharSets::Digit,
    'alpha'  => CharSets::Upper | CharSets::Lower,
    'blank'  => [" ", "\t"],
    'cntrl'  => CharSets::Control,
    'digit'  => CharSets::Digit,
    'graph'  => (CharSets::Any - CharSets::Control) - [" "], #  Visible chars
    'lower'  => CharSets::Lower,
    'print'  => CharSets::Any - CharSets::Control,
    'punct'  => CharSets::Punct,
    'space'  => CharSets::Whitespace,
    'upper'  => CharSets::Upper,
    'xdigit' => CharSets::Hex,
    'word'   => CharSets::Word,
    'ascii'  => CharSets::Any
  }.freeze

  def self.ranges_to_unicode(*ranges)
    result = []
    ranges.each do |range|
      if range.is_a? Fixnum # Small hack to improve readability below
        result << hex_to_unicode(range.to_s(16))
      else
        range.each { |num| result << hex_to_unicode(num.to_s(16)) }
      end
    end
  end

  def self.hex_to_unicode(hex)
    eval("?\\u{#{hex}}")
  end

  # These values were generated by: scripts/unicode_lister.rb
  # Note: Only the first 10 results are listed, for performance.
  # Also, some groups seem to have no matches (weird!)
  NamedPropertyCharMap = {
    'Alnum' => ranges_to_unicode(48..57),
    'Alpha' => ranges_to_unicode(65..74),
    'Blank' => ranges_to_unicode(9, 32, 160, 5760, 8192..8197),
    'Cntrl' => ranges_to_unicode(0..9),
    'Digit' => ranges_to_unicode(48..57),
    'Graph' => ranges_to_unicode(33..42),
    'Lower' => ranges_to_unicode(97..106),
    'Print' => ranges_to_unicode(32..41),
    'Punct' => ranges_to_unicode(33..35, 37..42, 44),
    'Space' => ranges_to_unicode(9..13, 32, 133, 160, 5760, 8192),
    'Upper' => ranges_to_unicode(65..74),
    'XDigit' => ranges_to_unicode(48..57),
    'Word' => ranges_to_unicode(48..57),
    'ASCII' => ranges_to_unicode(0..9),
    'Any' => ranges_to_unicode(0..9),
    'Assigned' => ranges_to_unicode(0..9),
    'L' => ranges_to_unicode(65..74),
    'Ll' => ranges_to_unicode(97..106),
    'Lm' => ranges_to_unicode(688..697),
    'Lo' => ranges_to_unicode(170, 186, 443, 448..451, 660, 1488..1489),
    'Lt' => ranges_to_unicode(453, 456, 459, 498, 8072..8077),
    'Lu' => ranges_to_unicode(65..74),
    'M' => ranges_to_unicode(768..777),
    'Mn' => ranges_to_unicode(768..777),
    'Mc' => ranges_to_unicode(2307, 2363, 2366..2368, 2377..2380, 2382),
    'Me' => ranges_to_unicode(1160..1161, 6846, 8413..8416, 8418..8420),
    'N' => ranges_to_unicode(48..57),
    'Nd' => ranges_to_unicode(48..57),
    'Nl' => ranges_to_unicode(5870..5872, 8544..8550),
    'No' => ranges_to_unicode(178..179, 185, 188..190, 2548..2551),
    'P' => ranges_to_unicode(33..35, 37..42, 44),
    'Pc' => ranges_to_unicode(95, 8255..8256, 8276),
    'Pd' => ranges_to_unicode(45, 1418, 1470, 5120, 6150, 8208..8212),
    'Ps' => ranges_to_unicode(40, 91, 123, 3898, 3900, 5787, 8218, 8222, 8261, 8317),
    'Pe' => ranges_to_unicode(41, 93, 125, 3899, 3901, 5788, 8262, 8318, 8334, 8969),
    'Pi' => ranges_to_unicode(171, 8216, 8219..8220, 8223, 8249, 11778, 11780, 11785, 11788),
    'Pf' => ranges_to_unicode(187, 8217, 8221, 8250, 11779, 11781, 11786, 11789, 11805, 11809),
    'Po' => ranges_to_unicode(33..35, 37..39, 42, 44, 46..47),
    'S' => ranges_to_unicode(36, 43, 60..62, 94, 96, 124, 126, 162),
    'Sm' => ranges_to_unicode(43, 60..62, 124, 126, 172, 177, 215, 247),
    'Sc' => ranges_to_unicode(36, 162..165, 1423, 1547, 2546..2547, 2555),
    'Sk' => ranges_to_unicode(94, 96, 168, 175, 180, 184, 706..709),
    'So' => ranges_to_unicode(166, 169, 174, 176, 1154, 1421..1422, 1550..1551, 1758),
    'Z' => ranges_to_unicode(32, 160, 5760, 8192..8198),
    'Zs' => ranges_to_unicode(32, 160, 5760, 8192..8198),
    'Zl' => ranges_to_unicode(8232),
    'Zp' => ranges_to_unicode(8233),
    'C' => ranges_to_unicode(0..9),
    'Cc' => ranges_to_unicode(0..9),
    'Cf' => ranges_to_unicode(173, 1536..1541, 1564, 1757, 1807),
    'Cn' => ranges_to_unicode(888..889, 896..899, 907, 909, 930, 1328),
    'Co' => ranges_to_unicode(),
    'Cs' => ranges_to_unicode(),
    'Arabic' => ranges_to_unicode(1536..1540, 1542..1546),
    'Armenian' => ranges_to_unicode(1329..1338),
    'Balinese' => ranges_to_unicode(6912..6921),
    'Bengali' => ranges_to_unicode(2432..2435, 2437..2442),
    'Bopomofo' => ranges_to_unicode(746..747, 12549..12556),
    'Braille' => ranges_to_unicode(10240..10249),
    'Buginese' => ranges_to_unicode(6656..6665),
    'Buhid' => ranges_to_unicode(5952..5961),
    'Canadian_Aboriginal' => ranges_to_unicode(5120..5129),
    'Carian' => ranges_to_unicode(),
    'Cham' => ranges_to_unicode(43520..43529),
    'Cherokee' => ranges_to_unicode(5024..5033),
    'Common' => ranges_to_unicode(0..9),
    'Coptic' => ranges_to_unicode(994..1003),
    'Cuneiform' => ranges_to_unicode(),
    'Cypriot' => ranges_to_unicode(),
    'Cyrillic' => ranges_to_unicode(1024..1033),
    'Deseret' => ranges_to_unicode(),
    'Devanagari' => ranges_to_unicode(2304..2313),
    'Ethiopic' => ranges_to_unicode(4608..4617),
    'Georgian' => ranges_to_unicode(4256..4265),
    'Glagolitic' => ranges_to_unicode(11264..11273),
    'Gothic' => ranges_to_unicode(),
    'Greek' => ranges_to_unicode(880..883, 885..887, 890..892),
    'Gujarati' => ranges_to_unicode(2689..2691, 2693..2699),
    'Gurmukhi' => ranges_to_unicode(2561..2563, 2565..2570, 2575),
    'Han' => ranges_to_unicode(11904..11913),
    'Hangul' => ranges_to_unicode(4352..4361),
    'Hanunoo' => ranges_to_unicode(5920..5929),
    'Hebrew' => ranges_to_unicode(1425..1434),
    'Hiragana' => ranges_to_unicode(12353..12362),
    'Inherited' => ranges_to_unicode(768..777),
    'Kannada' => ranges_to_unicode(3201..3203, 3205..3211),
    'Katakana' => ranges_to_unicode(12449..12458),
    'Kayah_Li' => ranges_to_unicode(43264..43273),
    'Kharoshthi' => ranges_to_unicode(),
    'Khmer' => ranges_to_unicode(6016..6025),
    'Lao' => ranges_to_unicode(3713..3714, 3716, 3719..3720, 3722, 3725, 3732..3734),
    'Latin' => ranges_to_unicode(65..74),
    'Lepcha' => ranges_to_unicode(7168..7177),
    'Limbu' => ranges_to_unicode(6400..6409),
    'Linear_B' => ranges_to_unicode(),
    'Lycian' => ranges_to_unicode(),
    'Lydian' => ranges_to_unicode(),
    'Malayalam' => ranges_to_unicode(3329..3331, 3333..3339),
    'Mongolian' => ranges_to_unicode(6144..6145, 6148, 6150..6156),
    'Myanmar' => ranges_to_unicode(4096..4105),
    'New_Tai_Lue' => ranges_to_unicode(6528..6537),
    'Nko' => ranges_to_unicode(1984..1993),
    'Ogham' => ranges_to_unicode(5760..5769),
    'Ol_Chiki' => ranges_to_unicode(7248..7257),
    'Old_Italic' => ranges_to_unicode(),
    'Old_Persian' => ranges_to_unicode(),
    'Oriya' => ranges_to_unicode(2817..2819, 2821..2827),
    'Osmanya' => ranges_to_unicode(),
    'Phags_Pa' => ranges_to_unicode(43072..43081),
    'Phoenician' => ranges_to_unicode(),
    'Rejang' => ranges_to_unicode(43312..43321),
    'Runic' => ranges_to_unicode(5792..5801),
    'Saurashtra' => ranges_to_unicode(43136..43145),
    'Shavian' => ranges_to_unicode(),
    'Sinhala' => ranges_to_unicode(3458..3459, 3461..3468),
    'Sundanese' => ranges_to_unicode(7040..7049),
    'Syloti_Nagri' => ranges_to_unicode(43008..43017),
    'Syriac' => ranges_to_unicode(1792..1801),
    'Tagalog' => ranges_to_unicode(5888..5897),
    'Tagbanwa' => ranges_to_unicode(5984..5993),
    'Tai_Le' => ranges_to_unicode(6480..6489),
    'Tamil' => ranges_to_unicode(2946..2947, 2949..2954, 2958..2959),
    'Telugu' => ranges_to_unicode(3072..3075, 3077..3082),
    'Thaana' => ranges_to_unicode(1920..1929),
    'Thai' => ranges_to_unicode(3585..3594),
    'Tibetan' => ranges_to_unicode(3840..3849),
    'Tifinagh' => ranges_to_unicode(11568..11577),
    'Ugaritic' => ranges_to_unicode(),
    'Vai' => ranges_to_unicode(42240..42249),
    'Yi' => ranges_to_unicode(40960..40969),
  }.freeze
end

